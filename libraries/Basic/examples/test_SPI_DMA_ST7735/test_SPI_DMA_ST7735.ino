// This code was written a million years ago during the age of the dinosaurs. For using in 8 bit controllers PIC18
// Casually adapted as an example for an SPI class in NSS_Soft mode
// Tested on HLK-W801 with default MOSI and SCK pins. See Variant.h/pins_arduino.h/GPIO_Defs.h/SPI.md for details

#include "Arduino.h"
#include "SPI.h"

#define ST7735_CS  PB14
#define ST7735_RST PB8
#define ST7735_A0  PB7

#define BLACK                      0x0000
#define BLUE                       0x001F
#define RED                        0xF800
#define GREEN                      0x0400
#define CYAN                       0x07FF
#define MAGENTA                    0xF81F
#define YELLOW                     0xFFE0
#define WHITE                      0xFFFF
#define VIOLET                     0xEC1D
#define AQUA                       0x07FF
#define YELLOW_GREEN               0x9E66
#define PURPLE                     0x8010

#define V_BUF_SIZE			1024

const uint16_t scr_width  = 128;
const uint16_t scr_height = 128;
uint16_t OffSetX = 2;
uint16_t OffSetY = 1;


/*************************************************************************************************************
   Драйвер lcg 1.44" 128X128 ST7735 VER 1.0. на красной плате
 ************************************************************************************************************/
char const Font7x11[] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // space 0x20  32
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x08,   // ! 0x21  33
  0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // " 0x22  34
  0x48, 0x48, 0x24, 0x7f, 0x24, 0x24, 0x12, 0x7f, 0x12, 0x09, 0x09,   // # 0x23  35
  0x08, 0x3e, 0x49, 0x09, 0x09, 0x3e, 0x48, 0x48, 0x49, 0x3e, 0x08,   // $ 0x24  36
  0x47, 0x25, 0x27, 0x10, 0x10, 0x08, 0x08, 0x04, 0x72, 0x52, 0x71,   // % 0x25  37
  0x06, 0x09, 0x09, 0x09, 0x26, 0x22, 0x25, 0x29, 0x11, 0x29, 0x46,   // & 0x26  38
  0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // ' 0x27  39
  0x08, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x08,   // ( 0x28  40
  0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x04,   // ) 0x29  41
  0x00, 0x08, 0x2a, 0x1c, 0x2a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,   // * 0x2A  42
  0x00, 0x00, 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00, 0x00,   // + 0x2B  43
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0c, 0x04,   // , 0x2C  44
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00,   // - 0x2D  45
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,   // . 0x2E  46
  0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x02, 0x02,   // / 0x2F  47
  0x1c, 0x22, 0x51, 0x51, 0x49, 0x49, 0x49, 0x45, 0x45, 0x22, 0x1c,   // 0 0x30  48
  0x08, 0x0c, 0x0a, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3e,   // 1 0x31  49
  0x1e, 0x21, 0x40, 0x40, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x7f,   // 2 0x32  50
  0x1f, 0x20, 0x40, 0x40, 0x20, 0x1e, 0x20, 0x40, 0x40, 0x20, 0x1f,   // 3 0x33  51
  0x30, 0x28, 0x24, 0x22, 0x21, 0x7f, 0x20, 0x20, 0x20, 0x20, 0x20,   // 4 0x34  52
  0x7f, 0x01, 0x01, 0x01, 0x1f, 0x20, 0x40, 0x40, 0x40, 0x20, 0x1f,   // 5 0x35  53
  0x38, 0x04, 0x02, 0x01, 0x1d, 0x23, 0x41, 0x41, 0x41, 0x22, 0x1c,   // 6 0x36  54
  0x7f, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02,   // 7 0x37  55
  0x1c, 0x22, 0x41, 0x41, 0x22, 0x1c, 0x22, 0x41, 0x41, 0x22, 0x1c,   // 8 0x38  56
  0x1c, 0x22, 0x41, 0x41, 0x41, 0x62, 0x5c, 0x40, 0x20, 0x10, 0x0e,   // 9 0x39  57
  0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00,   // : 0x3A  58
  0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x08, 0x04,   // ; 0x3B  59
  0x00, 0x40, 0x30, 0x0c, 0x02, 0x01, 0x02, 0x0c, 0x30, 0x40, 0x00,   // < 0x3C  60
  0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00,   // = 0x3D  61
  0x00, 0x01, 0x06, 0x18, 0x20, 0x40, 0x20, 0x18, 0x06, 0x01, 0x00,   // > 0x3E  62
  0x3e, 0x41, 0x40, 0x40, 0x30, 0x08, 0x08, 0x08, 0x00, 0x08, 0x08,   // ? 0x3F  63
  0x1c, 0x22, 0x41, 0x49, 0x55, 0x55, 0x55, 0x39, 0x01, 0x02, 0x3c,   // @ 0x40  64
  0x08, 0x14, 0x14, 0x22, 0x22, 0x41, 0x41, 0x7f, 0x41, 0x41, 0x41,   // A 0x41  65
  0x1f, 0x21, 0x21, 0x21, 0x1f, 0x21, 0x41, 0x41, 0x41, 0x21, 0x1f,   // B 0x42  66
  0x3c, 0x42, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x42, 0x3c,   // C 0x43  67
  0x1f, 0x22, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x22, 0x1f,   // D 0x44  68
  0x7f, 0x01, 0x01, 0x01, 0x1f, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7f,   // E 0x45  69
  0x7f, 0x01, 0x01, 0x01, 0x3f, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,   // F 0x46  70
  0x3c, 0x42, 0x01, 0x01, 0x01, 0x79, 0x41, 0x41, 0x41, 0x42, 0x3c,   // G 0x47  71
  0x41, 0x41, 0x41, 0x41, 0x7f, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,   // H 0x48  72
  0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c,   // I 0x49  73
  0x1e, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x0e,   // J 0x4A  74
  0x21, 0x11, 0x09, 0x05, 0x03, 0x03, 0x05, 0x09, 0x11, 0x21, 0x41,   // K 0x4B  75
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7f,   // L 0x4C  76
  0x41, 0x63, 0x55, 0x55, 0x49, 0x49, 0x41, 0x41, 0x41, 0x41, 0x41,   // M 0x4D  77
  0x41, 0x41, 0x41, 0x43, 0x43, 0x45, 0x49, 0x51, 0x51, 0x61, 0x41,   // N 0x4E  78
  0x1c, 0x22, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x22, 0x1c,   // O 0x4F  79
  0x1f, 0x21, 0x41, 0x41, 0x41, 0x21, 0x1f, 0x01, 0x01, 0x01, 0x01,   // P 0x50  80
  0x1c, 0x22, 0x41, 0x41, 0x41, 0x41, 0x41, 0x49, 0x51, 0x22, 0x5c,   // Q 0x51  81
  0x1f, 0x21, 0x41, 0x41, 0x41, 0x21, 0x1f, 0x09, 0x11, 0x21, 0x41,   // R 0x52  82
  0x1c, 0x22, 0x41, 0x01, 0x02, 0x1c, 0x20, 0x40, 0x41, 0x22, 0x1c,   // S 0x53  83
  0x7f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,   // T 0x54  84
  0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x22, 0x1c,   // U 0x55  85
  0x41, 0x41, 0x22, 0x22, 0x22, 0x22, 0x14, 0x14, 0x14, 0x08, 0x08,   // V 0x56  86
  0x41, 0x41, 0x41, 0x41, 0x49, 0x49, 0x49, 0x55, 0x55, 0x63, 0x41,   // W 0x57  87
  0x41, 0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x14, 0x22, 0x22, 0x41,   // X 0x58  88
  0x41, 0x41, 0x22, 0x14, 0x14, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,   // Y 0x59  89
  0x7f, 0x40, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01, 0x7f,   // Z 0x5A  90
  0x1c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1c,   // [ 0x5B  91
  0x01, 0x02, 0x02, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x10,   // \ 0x5C  92
  0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e,   // ] 0x5D  93
  0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // ^ 0x5E  94
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,   // _ 0x5F  95
  0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // ` 0x60  96
  0x00, 0x00, 0x00, 0x3e, 0x41, 0x40, 0x7e, 0x41, 0x41, 0x61, 0x5e,   // a 0x61  97
  0x01, 0x01, 0x01, 0x1d, 0x23, 0x41, 0x41, 0x41, 0x41, 0x23, 0x1d,   // b 0x62  98
  0x00, 0x00, 0x00, 0x3c, 0x42, 0x01, 0x01, 0x01, 0x01, 0x42, 0x3c,   // c 0x63  99
  0x40, 0x40, 0x40, 0x5c, 0x62, 0x41, 0x41, 0x41, 0x41, 0x62, 0x5c,   // d 0x64 100
  0x00, 0x00, 0x00, 0x1c, 0x22, 0x41, 0x7f, 0x01, 0x01, 0x42, 0x3c,   // e 0x65 101
  0x1c, 0x04, 0x04, 0x0e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,   // f 0x66 102
  0x00, 0x00, 0x00, 0x5e, 0x61, 0x41, 0x61, 0x5e, 0x40, 0x21, 0x1e,   // g 0x67 103
  0x01, 0x01, 0x01, 0x3d, 0x43, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,   // h 0x68 104
  0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,   // i 0x69 105
  0x00, 0x10, 0x00, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x12, 0x0c,   // j 0x6A 106
  0x01, 0x01, 0x01, 0x21, 0x11, 0x09, 0x07, 0x09, 0x11, 0x21, 0x41,   // k 0x6B 107
  0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0c,   // l 0x6C 108
  0x00, 0x00, 0x00, 0x25, 0x5b, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,   // m 0x6D 109
  0x00, 0x00, 0x00, 0x1d, 0x23, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,   // n 0x6E 110
  0x00, 0x00, 0x00, 0x1c, 0x22, 0x41, 0x41, 0x41, 0x41, 0x22, 0x1c,   // o 0x6F 111
  0x00, 0x00, 0x00, 0x1f, 0x21, 0x41, 0x41, 0x21, 0x1f, 0x01, 0x01,   // p 0x70 112
  0x00, 0x00, 0x00, 0x2c, 0x32, 0x21, 0x21, 0x21, 0x32, 0x2c, 0x20,   // q 0x71 113
  0x00, 0x00, 0x00, 0x3d, 0x43, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,   // r 0x72 114
  0x00, 0x00, 0x00, 0x3e, 0x41, 0x01, 0x0e, 0x30, 0x40, 0x41, 0x3e,   // s 0x73 115
  0x00, 0x04, 0x04, 0x3e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x38,   // t 0x74 116
  0x00, 0x00, 0x00, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x31, 0x2e,   // u 0x75 117
  0x00, 0x00, 0x00, 0x41, 0x41, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08,   // v 0x76 118
  0x00, 0x00, 0x00, 0x41, 0x41, 0x41, 0x49, 0x49, 0x49, 0x49, 0x36,   // w 0x77 119
  0x00, 0x00, 0x00, 0x41, 0x22, 0x14, 0x08, 0x08, 0x14, 0x22, 0x41,   // x 0x78 120
  0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x24, 0x38, 0x10, 0x08, 0x06,   // y 0x79 121
  0x00, 0x00, 0x00, 0x7f, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x7f,   // z 0x7A 122
  0x18, 0x08, 0x08, 0x08, 0x04, 0x06, 0x04, 0x08, 0x08, 0x08, 0x18,   // { 0x7B 123
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,   // | 0x7C 124
  0x0c, 0x08, 0x08, 0x08, 0x10, 0x30, 0x10, 0x08, 0x08, 0x08, 0x0c,   // } 0x7D 125
  0x00, 0x00, 0x00, 0x00, 0x04, 0x0a, 0x51, 0x20, 0x00, 0x00, 0x00,   // ~ 0x7E 126
  0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f
}; //  0x7F 127

#define HWRST_SET       digitalWrite(ST7735_RST,HIGH)
#define HWRST_RESET     digitalWrite(ST7735_RST,LOW)
#define ST7735_COMMAND  digitalWrite(ST7735_A0,LOW)
#define ST7735_DATA     digitalWrite(ST7735_A0,HIGH)
#define ST7735_SELECT   digitalWrite(ST7735_CS,LOW)
#define ST7735_UNSELECT digitalWrite(ST7735_CS,HIGH)

typedef enum
{
  scr_normal = 0,
  scr_CW     = 1,
  scr_CCW    = 2,
  scr_180    = 3
} ScrOrientation_TypeDef;


void ST7735_write(uint8_t data)
{
  ST7735_SELECT;
  SPI.transfer(data);
  ST7735_UNSELECT;
}

void ST7735_cmd(uint8_t cmd)
{
  ST7735_COMMAND;
  ST7735_write(cmd);
}

void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE)
{
  XS = XS + OffSetX;
  XE = XE + OffSetX;
  YS = YS + OffSetY;
  YE = YE + OffSetY;
  ST7735_cmd(0x2a);
  ST7735_DATA;
  ST7735_write(XS >> 8);
  ST7735_write(XS);
  ST7735_write(XE >> 8);
  ST7735_write(XE);
  ST7735_cmd(0x2b);
  ST7735_DATA;
  ST7735_write(YS >> 8);
  ST7735_write(YS);
  ST7735_write(YE >> 8);
  ST7735_write(YE);
  ST7735_cmd(0x2c);
}

void ST7735_PutChar7x11(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color, uint16_t bgcolor)
{
  uint16_t i, j;
  uint8_t buffer[11];
  uint8_t CH = color >> 8;
  uint8_t CL = (uint8_t)color;
  uint8_t BCH = bgcolor >> 8;
  uint8_t BCL = (uint8_t)bgcolor;

  memcpy(buffer, &Font7x11[(chr - 32) * 11], 11);
  ST7735_AddrSet(X, Y, X + 7, Y + 11);
  ST7735_DATA;
  for (i = 0; i < 11; i++)
  {
    for (j = 0; j < 7; j++)
    {
      if ((buffer[i] >> j) & 0x01)
      {
        ST7735_write(CH);
        ST7735_write(CL);
      }
      else
      {
        ST7735_write(BCH);
        ST7735_write(BCL);
      }
    }
    ST7735_write(BCH);
    ST7735_write(BCL);
  }
  for (i = 0; i < 8; i++)
  {
    ST7735_write(BCH);
    ST7735_write(BCL);
  }
}

void ST7735_PutStr7x11(uint8_t X, uint8_t Y, char *str, uint16_t color, uint16_t bgcolor)
{
  while (*str)
  {
    ST7735_PutChar7x11(X, Y, *str++, color, bgcolor);
    if (X < scr_width - 8) {
      X += 8;
    } else if (Y < scr_height - 12) {
      X = 0;
      Y += 12;
    } else {
      X = 0;
      Y = 0;
    }
  };
}

void ST7735_Clear(uint16_t color)
{
  uint16_t i;
  uint8_t  CH, CL;

  CH = color >> 8;
  CL = (uint8_t)color;

  ST7735_AddrSet(0, 0, (scr_width - 1), (scr_height - 1));
  ST7735_DATA;
  for (i = 0; i < (scr_width * scr_height); i++) {
    ST7735_write(CH);
    ST7735_write(CL);
  }
}


void ST7735_HWRST()
{
  HWRST_RESET;
  HWRST_SET;
}

void ST7735_data(uint8_t data)
{
  ST7735_DATA;
  ST7735_write(data);
}

void ST7735_SWRST()
{
  ST7735_cmd(0x01);
  ST7735_data(0x01);
}

void ST7735_Pixel(uint16_t X, uint16_t Y, uint16_t color)
{
  ST7735_AddrSet(X, Y, X, Y);
  ST7735_DATA;
  ST7735_write(color >> 8);
  ST7735_write((uint8_t)color);
}

void ST7735_HLine(uint16_t X1, uint16_t X2, uint16_t Y, uint16_t color)
{
  uint16_t i;
  uint8_t CH = color >> 8;
  uint8_t CL = (uint8_t)color;

  ST7735_AddrSet(X1, Y, X2, Y);
  ST7735_DATA;
  for (i = 0; i <= (X2 - X1); i++)
  {
    ST7735_write(CH);
    ST7735_write(CL);
  }
}

void ST7735_VLine(uint16_t X, uint16_t Y1, uint16_t Y2, uint16_t color)
{
  uint16_t i;
  uint8_t CH = color >> 8;
  uint8_t CL = (uint8_t)color;

  ST7735_AddrSet(X, Y1, X, Y2);
  ST7735_DATA;
  for (i = 0; i <= (Y2 - Y1); i++)
  {
    ST7735_write(CH);
    ST7735_write(CL);
  }
}

void ST7735_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2, uint16_t color)
{
  int16_t dX = X2 - X1;
  int16_t dY = Y2 - Y1;
  int16_t dXsym = (dX > 0) ? 1 : -1;
  int16_t dYsym = (dY > 0) ? 1 : -1;

  if (dX == 0)
  {
    if (Y2 > Y1) ST7735_VLine(X1, Y1, Y2, color); else ST7735_VLine(X1, Y2, Y1, color);
    return;
  }
  if (dY == 0)
  {
    if (X2 > X1) ST7735_HLine(X1, X2, Y1, color); else ST7735_HLine(X2, X1, Y1, color);
    return;
  }

  dX *= dXsym;
  dY *= dYsym;
  int16_t dX2 = dX << 1;
  int16_t dY2 = dY << 1;
  int16_t di;

  if (dX >= dY)
  {
    di = dY2 - dX;
    while (X1 != X2)
    {
      ST7735_Pixel(X1, Y1, color);
      X1 += dXsym;
      if (di < 0)
      {
        di += dY2;
      }
      else
      {
        di += dY2 - dX2;
        Y1 += dYsym;
      }
    }
  }
  else
  {
    di = dX2 - dY;
    while (Y1 != Y2)
    {
      ST7735_Pixel(X1, Y1, color);
      Y1 += dYsym;
      if (di < 0)
      {
        di += dX2;
      }
      else
      {
        di += dX2 - dY2;
        X1 += dXsym;
      }
    }
  }
  ST7735_Pixel(X1, Y1, color);
}

void ST7735_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2, uint16_t color)
{
  ST7735_HLine(X1, X2, Y1, color);
  ST7735_HLine(X1, X2, Y2, color);
  ST7735_VLine(X1, Y1, Y2, color);
  ST7735_VLine(X2, Y1, Y2, color);
}

void ST7735_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2, uint16_t color)
{
  uint16_t i;
  uint16_t FS = (X2 - X1 + 1) * (Y2 - Y1 + 1);
  uint8_t CH = color >> 8;
  uint8_t CL = (uint8_t)color;

  ST7735_AddrSet(X1, Y1, X2, Y2);
  ST7735_DATA;
  for (i = 0; i < FS; i++)
  {
    ST7735_write(CH);
    ST7735_write(CL);
  }
}

void ST7735_init() {
  ST7735_HWRST();
  delay(15);
  ST7735_SWRST();
  delay(150);
  ST7735_cmd(0x11); //SLPOUT
  delay(255);
  ST7735_cmd(0xb1); //FRMCTR1
  ST7735_DATA;
  ST7735_write(0x01);
  ST7735_write(0x2c);
  ST7735_write(0x2d);
  ST7735_cmd(0xb2); //FRMCTR2
  ST7735_DATA;
  ST7735_write(0x01);
  ST7735_write(0x2c);
  ST7735_write(0x2d);
  ST7735_cmd(0xb3); //FRMCTR3
  ST7735_DATA;
  ST7735_write(0x01);
  ST7735_write(0x2c);
  ST7735_write(0x2d);
  ST7735_write(0x01);
  ST7735_write(0x2c);
  ST7735_write(0x2d);
  ST7735_cmd(0xb4); //INVCTR
  ST7735_data(0x07);
  ST7735_cmd(0xc0); //PWCTR1
  ST7735_DATA;
  ST7735_write(0xa2);
  ST7735_write(0x02);
  ST7735_write(0x84);
  ST7735_cmd(0xc1); //PWCTR2
  ST7735_data(0xc5);
  ST7735_cmd(0xC2); //PWCTR3
  ST7735_DATA;
  ST7735_write(0x0a);
  ST7735_write(0x00);
  ST7735_cmd(0xc3); //PWCTR4
  ST7735_DATA;
  ST7735_write(0x8a);
  ST7735_write(0x2a);
  ST7735_cmd(0xc4); //PWCTR5
  ST7735_DATA;
  ST7735_write(0x8a);
  ST7735_write(0xee);
  ST7735_cmd(0xc5); //VMCTR1
  ST7735_data(0x0e);
  ST7735_cmd(0x20); //INVOFF
  ST7735_cmd(0x36); //MADCTL
  ST7735_data(0x8);
  ST7735_cmd(0x3a); //COLMOD
  ST7735_data(0x05);
  delay(10);
  ST7735_cmd(0x2a); //CASET
  ST7735_DATA;
  ST7735_write(0x00);
  ST7735_write(0x00);
  ST7735_write(0x00);
  ST7735_write(0x7f);
  ST7735_cmd(0x2b); //RASET
  ST7735_DATA;
  ST7735_write(0x00);
  ST7735_write(0x00);
  ST7735_write(0x00);
  ST7735_write(0x7f);
  ST7735_cmd(0xe0); //GMCTRP1
  ST7735_DATA;
  ST7735_write(0x02);
  ST7735_write(0x1c);
  ST7735_write(0x07);
  ST7735_write(0x12);
  ST7735_write(0x37);
  ST7735_write(0x32);
  ST7735_write(0x29);
  ST7735_write(0x2d);
  ST7735_write(0x29);
  ST7735_write(0x25);
  ST7735_write(0x28);
  ST7735_write(0x39);
  ST7735_write(0x00);
  ST7735_write(0x01);
  ST7735_write(0x03);
  ST7735_write(0x10);
  ST7735_cmd(0xe1); //GMCTRN1
  ST7735_DATA;
  ST7735_write(0x03);
  ST7735_write(0x1d);
  ST7735_write(0x07);
  ST7735_write(0x06);
  ST7735_write(0x2e);
  ST7735_write(0x2c);
  ST7735_write(0x29);
  ST7735_write(0x2d);
  ST7735_write(0x2e);
  ST7735_write(0x2e);
  ST7735_write(0x37);
  ST7735_write(0x3f);
  ST7735_write(0x00);
  ST7735_write(0x00);
  ST7735_write(0x02);
  ST7735_write(0x10);
  ST7735_cmd(0x13); //NORON
  delay(10);
  ST7735_cmd(0x29); //DISPON
}

void ST7735_Orientation(ScrOrientation_TypeDef orientation)
{
  ST7735_cmd(0x36); // Memory data access control:
  switch (orientation)
  {
    case scr_CW:
      OffSetX = 3;
      OffSetY = 2;
      ST7735_data(0xa8);
      break;
    case scr_CCW:
      OffSetX = 1;
      OffSetY = 2;
      ST7735_data(0x68);
      break;
    case scr_180:
      OffSetX = 2;
      OffSetY = 3;
      ST7735_data(0xc8);
      break;
    default:
      OffSetX = 2;
      OffSetY = 1;
      ST7735_data(0x08);
      break;
  }
}
void ST7735_invertDisplay(bool i) {
  ST7735_cmd(i ? 0x21 : 0x20);
}

void setup() {
  
  pinMode(ST7735_RST, OUTPUT);
  pinMode(ST7735_CS, OUTPUT);
  pinMode(ST7735_A0, OUTPUT);
  
  SPI.beginTransaction(SPISettings(20000000,MSBFIRST, SPI_MODE0)); // Запускаем SPI на частоте 20 Мгц

  ST7735_init();
  ST7735_Orientation(scr_normal);
  ST7735_Clear(RED);
  ST7735_Rect(0, 6, 127, 127, YELLOW);
  ST7735_PutStr7x11(35, 0,  (char *)"[ MODE ]", YELLOW, BLACK);
  ST7735_PutStr7x11(45, 30, (char *)"SWEEP", YELLOW, BLACK);
  ST7735_PutStr7x11(45, 50, (char *)"R6DCZ", YELLOW, BLACK);
  ST7735_PutStr7x11(45, 70, (char *)"KVN234", YELLOW, BLACK);
  ST7735_PutStr7x11(45, 90, (char *)"GEN", YELLOW, BLACK);
  
}

uint16_t col[12] = {BLACK,BLUE,RED,GREEN,CYAN,MAGENTA,YELLOW,WHITE,VIOLET,AQUA,YELLOW_GREEN,PURPLE};

void loop() {
	uint8_t x=0;
	uint16_t video_buf [V_BUF_SIZE] = {0};
	for(x=0;x < sizeof(col)/2; x++)
	{	
		for(int j=0; j<V_BUF_SIZE;j++) video_buf[j]=col[x];
		ST7735_AddrSet(0, 0, (scr_width - 1), (scr_height - 1));
		ST7735_DATA;
		ST7735_SELECT;
		for (uint16_t i=0; i < (scr_width*scr_height)/V_BUF_SIZE; i++)
		{
			for(int j=0; j<V_BUF_SIZE;j++) video_buf[j]=col[x];
			SPI.transfer(video_buf, sizeof(video_buf));
		}
		ST7735_UNSELECT;
	}
}